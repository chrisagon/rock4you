/**
 * Script de test pour valider la correction de priorit√© du clic
 * V√©rifie que cliquer sur l'image d√©marre la lecture au lieu d'ouvrir le plein √©cran
 */

const fs = require('fs');
const path = require('path');

console.log('üéØ Test de la correction de priorit√© du clic');
console.log('=' .repeat(60));

// Lire les fichiers modifi√©s
const favoritesPath = path.join(__dirname, '../app/(tabs)/favorites.tsx');
const gifPlayerPath = path.join(__dirname, '../components/GifPlayer.tsx');

if (!fs.existsSync(favoritesPath)) {
  console.error('‚ùå Fichier favorites.tsx non trouv√©');
  process.exit(1);
}

if (!fs.existsSync(gifPlayerPath)) {
  console.error('‚ùå Fichier GifPlayer.tsx non trouv√©');
  process.exit(1);
}

const favoritesContent = fs.readFileSync(favoritesPath, 'utf8');
const gifPlayerContent = fs.readFileSync(gifPlayerPath, 'utf8');

// Tests de validation
const tests = [
  {
    name: 'GifPlayer sans prop onPress dans favorites',
    test: () => {
      const gifPlayerUsage = favoritesContent.substring(
        favoritesContent.indexOf('<GifPlayer'),
        favoritesContent.indexOf('/>') + 2
      );
      return !gifPlayerUsage.includes('onPress=');
    },
    description: 'V√©rifie que le GifPlayer n\'a plus de prop onPress qui ouvrait le plein √©cran'
  },
  {
    name: 'Bouton plein √©cran s√©par√© ajout√©',
    test: () => favoritesContent.includes('fullScreenButton') && 
                favoritesContent.includes('<Maximize2'),
    description: 'V√©rifie qu\'un bouton s√©par√© pour le plein √©cran a √©t√© ajout√©'
  },
  {
    name: 'Import Maximize2 ajout√©',
    test: () => favoritesContent.includes('Maximize2'),
    description: 'V√©rifie que l\'ic√¥ne Maximize2 est import√©e'
  },
  {
    name: 'Container GIF avec bouton overlay',
    test: () => favoritesContent.includes('gifContainer') && 
                favoritesContent.includes('position: \'absolute\''),
    description: 'V√©rifie que le container GIF et le bouton overlay sont correctement structur√©s'
  },
  {
    name: 'Fonction handleContainerPress dans GifPlayer',
    test: () => gifPlayerContent.includes('const handleContainerPress = () => {'),
    description: 'V√©rifie que la fonction de gestion du clic prioritaire existe dans GifPlayer'
  },
  {
    name: 'Logique de priorit√© lecture vs navigation',
    test: () => {
      const handleFunction = gifPlayerContent.substring(
        gifPlayerContent.indexOf('const handleContainerPress'),
        gifPlayerContent.indexOf('const handleContainerPress') + 300
      );
      return handleFunction.includes('if (gifState.status === \'loaded\')') &&
             handleFunction.includes('onTogglePlay()') &&
             handleFunction.includes('else if (onPress)');
    },
    description: 'V√©rifie que la priorit√© lecture > navigation est impl√©ment√©e'
  },
  {
    name: 'Styles fullScreenButton d√©finis',
    test: () => {
      const stylesSection = favoritesContent.substring(
        favoritesContent.indexOf('fullScreenButton: {'),
        favoritesContent.indexOf('fullScreenButton: {') + 200
      );
      return stylesSection.includes('position: \'absolute\'') &&
             stylesSection.includes('top: 4') &&
             stylesSection.includes('right: 4') &&
             stylesSection.includes('backgroundColor: \'rgba(0, 0, 0, 0.7)\'');
    },
    description: 'V√©rifie que les styles du bouton plein √©cran sont correctement d√©finis'
  },
  {
    name: 'Structure moveCard modifi√©e',
    test: () => {
      // V√©rifier que TouchableOpacity a √©t√© remplac√© par View pour moveCard
      const moveCardSection = favoritesContent.substring(
        favoritesContent.indexOf('key={move.id} style={styles.moveCard}'),
        favoritesContent.indexOf('key={move.id} style={styles.moveCard}') + 100
      );
      return moveCardSection.includes('<View key={move.id}');
    },
    description: 'V√©rifie que la structure de la carte de mouvement a √©t√© modifi√©e'
  }
];

// Ex√©cution des tests
let passed = 0;
let failed = 0;

console.log('\nüìã R√©sultats des tests :');
console.log('-'.repeat(40));

tests.forEach((test, index) => {
  try {
    const result = test.test();
    if (result) {
      console.log(`‚úÖ Test ${index + 1}: ${test.name}`);
      console.log(`   ${test.description}`);
      passed++;
    } else {
      console.log(`‚ùå Test ${index + 1}: ${test.name}`);
      console.log(`   ${test.description}`);
      failed++;
    }
  } catch (error) {
    console.log(`‚ùå Test ${index + 1}: ${test.name} (Erreur: ${error.message})`);
    failed++;
  }
  console.log('');
});

// Tests de comportement attendu
console.log('üéÆ Tests de comportement attendu :');
console.log('-'.repeat(40));

const behaviorTests = [
  {
    name: 'Clic sur image ‚Üí Lecture',
    description: 'Cliquer sur l\'image du GIF d√©marre/pause la lecture',
    expected: 'onTogglePlay() appel√© quand gifState.status === "loaded"'
  },
  {
    name: 'Bouton plein √©cran ‚Üí Modal',
    description: 'Cliquer sur le bouton Maximize2 ouvre le plein √©cran',
    expected: 'openFullScreen(move) appel√© depuis le bouton s√©par√©'
  },
  {
    name: '√âtats non-charg√©s ‚Üí Navigation',
    description: 'Cliquer sur un GIF en erreur/indisponible utilise la navigation par d√©faut',
    expected: 'onPress() appel√© si fourni et gifState.status !== "loaded"'
  }
];

behaviorTests.forEach((test, index) => {
  console.log(`üéØ Comportement ${index + 1}: ${test.name}`);
  console.log(`   ${test.description}`);
  console.log(`   Attendu: ${test.expected}`);
  console.log('');
});

// R√©sum√©
console.log('üìä R√©sum√© des tests :');
console.log(`‚úÖ Tests r√©ussis: ${passed}`);
console.log(`‚ùå Tests √©chou√©s: ${failed}`);
console.log(`üìà Taux de r√©ussite: ${Math.round((passed / tests.length) * 100)}%`);

// Validation de la correction
if (passed >= 6) {
  console.log('\nüéâ Correction de priorit√© valid√©e avec succ√®s !');
  console.log('‚ú® Comportement corrig√© :');
  console.log('   ‚Ä¢ Clic sur image ‚Üí D√©marre/pause la lecture');
  console.log('   ‚Ä¢ Bouton s√©par√© ‚Üí Ouvre le plein √©cran');
  console.log('   ‚Ä¢ Interface plus intuitive et logique');
  console.log('   ‚Ä¢ Priorit√© donn√©e √† la lecture sur la navigation');
} else {
  console.log('\n‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez l\'impl√©mentation.');
}

// Test de r√©gression - v√©rifier que les fonctionnalit√©s existantes sont pr√©serv√©es
console.log('\nüîç Tests de r√©gression :');
const regressionTests = [
  {
    name: 'Plein √©cran toujours accessible',
    test: () => favoritesContent.includes('openFullScreen') && 
                favoritesContent.includes('FullScreenImageModal'),
    description: 'Le plein √©cran est toujours accessible via le bouton d√©di√©'
  },
  {
    name: 'Gestion des favoris pr√©serv√©e',
    test: () => favoritesContent.includes('handleRemoveFavorite') && 
                favoritesContent.includes('Heart'),
    description: 'La gestion des favoris (ajout/suppression) est pr√©serv√©e'
  },
  {
    name: 'Validation GIF pr√©serv√©e',
    test: () => favoritesContent.includes('generateValidationReport') && 
                favoritesContent.includes('AlertTriangle'),
    description: 'La validation des GIFs est toujours disponible'
  }
];

let regressionPassed = 0;
regressionTests.forEach((test, index) => {
  const result = test.test();
  if (result) {
    console.log(`‚úÖ R√©gression ${index + 1}: ${test.name}`);
    regressionPassed++;
  } else {
    console.log(`‚ùå R√©gression ${index + 1}: ${test.name}`);
  }
});

console.log(`\nüìã Tests de r√©gression: ${regressionPassed}/${regressionTests.length} r√©ussis`);

if (passed >= 6 && regressionPassed === regressionTests.length) {
  console.log('\nüöÄ Correction de priorit√© compl√®tement valid√©e !');
  console.log('   Le clic sur l\'image d√©marre maintenant la lecture');
  console.log('   Le plein √©cran reste accessible via un bouton d√©di√©');
  console.log('   Aucune r√©gression d√©tect√©e');
  process.exit(0);
} else {
  console.log('\n‚ö†Ô∏è  Validation incompl√®te. V√©rifiez l\'impl√©mentation.');
  process.exit(1);
}